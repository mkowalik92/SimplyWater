#pragma kernel main

// Math and physics numbers
#define PI 3.1415926535897932384626433832795
const float gravity = 9.81;

// Wave settings
uint N;
uint L;
float amplitude;
float windSpeed;
float capillarSupressFactor;
float2 direction;

// We need 4 noise textures to sample values from for our gaussian number generator
Texture2D<float4> noiseTexture1; // Noise texture 1 input
Texture2D<float4> noiseTexture2; // Noise texture 2 input
Texture2D<float4> noiseTexture3; // Noise texture 3 input
Texture2D<float4> noiseTexture4; // Noise texture 4 input

// Output textures for h0k and minus h0k which is used in calculating hkt
RWTexture2D<float4> h0kTexture; // h0k output texture
RWTexture2D<float4> h0minuskTexture; // minus h0k output texture

float4 gaussRND (uint2 threadId)
{
	float2 textureCoord = float2(threadId.x, threadId.y) / float(N);

	float noise1 = clamp(noiseTexture1[threadId.xy].r, 0.001, 1.0);
	float noise2 = clamp(noiseTexture2[threadId.xy].r, 0.001, 1.0);
	float noise3 = clamp(noiseTexture3[threadId.xy].r, 0.001, 1.0);
	float noise4 = clamp(noiseTexture4[threadId.xy].r, 0.001, 1.0);

	float u0 = 2.0 * PI * noise1;
	float v0 = sqrt(-2.0 * log(noise2));
	float u1 = 2.0 * PI * noise3;
	float v1 = sqrt(-2.0 * log(noise4));

	float4 randomNum = float4(v0 * cos(u0), v0 * sin(u0), v1 * cos(u1), v1 * sin(u1));

	return randomNum;
}

[numthreads(16, 16, 1)]
void main (uint3 threadId : SV_DispatchThreadID)
{
	float2 x = float2(threadId.x, threadId.y) - (float(N) / 2.0);

	float2 k = float2(2.0 * PI * (x.x / L), 2.0 * PI *(x.y / L));

	float L_ = (windSpeed * windSpeed) / gravity;
	float magnitude = length(k);
	if (magnitude < 0.00001) magnitude = 0.00001;
	float magnitudeSq = magnitude * magnitude;

	float h0k = clamp(sqrt((amplitude/(magnitudeSq*magnitudeSq)) * pow(dot(normalize(k), normalize(direction)), 2.0) * 
				exp(-(1.0/(magnitudeSq * L_ * L_))) * exp(-magnitudeSq*pow(capillarSupressFactor,2.0)))/ sqrt(2.0), -4000.0, 4000.0);
	
	float h0minusk = clamp(sqrt((amplitude/(magnitudeSq*magnitudeSq)) * pow(dot(normalize(-k), normalize(direction)), 2.0) * 
					 exp(-(1.0/(magnitudeSq * L_ * L_))) * exp(-magnitudeSq*pow(capillarSupressFactor,2.0)))/ sqrt(2.0), -4000.0, 4000.0);;

	float4 gaussRandomNumber = gaussRND(threadId);

	h0kTexture[threadId.xy] =  float4(gaussRandomNumber.xy * h0k, 0.0, 1.0);
	h0minuskTexture[threadId.xy] =  float4(gaussRandomNumber.zw * h0minusk, 0.0, 1.0);
}
